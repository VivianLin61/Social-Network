{"version":3,"sources":["actions/index.js","util/graphql.js","components/DropDownMenu.js","components/NotificationCard.js","components/MenuBar.js","components/LikeButton.js","components/PopupModal.js","components/Modals/DeleteModal.js","components/PostCard.js","util/hooks.js","components/Modals/CreatePostModal.js","pages/Home.js","pages/Login.js","pages/Register.js","components/CommentCard.js","pages/SinglePost.js","pages/Profile/UpdateInfo.js","pages/Profile/UpdateInfoModal.js","pages/Profile/index.js","App.js","reducers/auth.reducers.js","reducers/index.js","ApolloProvider.js","index.js"],"names":["login","userData","dispatch","a","localStorage","setItem","token","JSON","stringify","type","payload","email","id","profileImage","username","updateUser","FETCH_POSTS_QUERY","gql","GET_NOTIFICATIONS_QUERY","GET_USER","CREATE_NOTIFICATION","UPDATE_NOTIFICATION","DELETE_NOTIFICATION","DropDownMenu","props","DropdownItem","href","onClick","handleDropdown","className","children","notification","updateNotification","deleteNotification","setShowDeleteModal","setOpen","style","color","NotificationCard","deactivateNotification","useState","open","notificationMenu","useMutation","update","proxy","data","readQuery","query","variables","userId","writeQuery","getNotifications","filter","n","deleteNotificationMutation","map","read","updateNotificationMutation","display","justifyContent","padding","to","postId","message","moment","createdAt","fromNow","MenuBar","user","setUser","show","setShow","menu","showMenu","node","useRef","handleClose","handleShow","notificationsLength","notifications","useDispatch","auth","useSelector","state","useQuery","refetch","useEffect","modalContainer","document","querySelectorAll","classList","add","remove","addEventListener","handleClick","removeEventListener","e","current","contains","target","unRead","length","onCompleted","Nav","defaultActiveKey","as","Item","Link","clear","ref","index","name","LIKE_POST_MUTATION","LikeButton","post","likeCount","likes","liked","setLiked","find","like","createLikeNotification","likePost","onError","err","console","log","likeButton","fontSize","pointerEvents","PopupModal","Modal","onHide","Header","Title","title","DELETE_POST_MUTATION","DELETE_COMMENT_MUTATION","DeleteModal","mutation","comment_id","post_id","popup","setPopup","getPosts","p","callback","commentId","deletePostOrMutation","size","aria-labelledby","centered","Body","Footer","Button","handleClosePopup","PostCard","userInfo","body","commentCount","postUser","showDeleteModal","getUser","Row","Col","xs","src","alt","height","useForm","initialState","values","setValues","onChange","event","value","onSubmit","preventDefault","resetValues","CREATE_POST_MUTATION","CreatePostModal","textArea","result","createPost","error","handlePost","onEntered","focus","Form","Group","controlId","Control","placeholder","rows","undefined","backgroundColor","Home","loading","posts","modalShow","setModalShow","marginLeft","marginTop","width","InputGroup","FormControl","aria-label","aria-describedby","cursor","readOnly","Login","errors","setErrors","loginUser","LOGIN_USER","_","history","push","graphQLErrors","extensions","exception","Label","password","variant","Object","keys","REGISTER_USER","Register","addUser","confirmPassword","register","CommentCard","comment","image","float","SUBMIT_COMMENT_MUTATION","FETCH_POST_QUERY","SinglePost","match","params","setComment","commentInputRef","postInfo","getPost","postUserData","createCommentNotification","blur","commenterId","submitComment","comments","UpdateInfo","imageHandler","profileImg","accept","htmlFor","handleUpdateInfo","UpdateInfoModal","currentPassword","empty","setEmpty","general","showPopup","getElementsByName","prevEmpty","onShow","ADD_PROFILE_IMAGE","UPDATE_USER","Profile","setProfileImg","updateModal","showUpdateModal","updateType","setUpdateType","changeUserInfo","setUsername","setEmail","_id","addProfileImage","updateUserImage","file","files","reader","FileReader","onload","readyState","readAsDataURL","App","getItem","parse","Container","exact","path","component","rootReducer","combineReducers","action","uploadLink","createUploadLink","uri","authLink","setContext","headers","Authorization","client","ApolloClient","link","concat","cache","InMemoryCache","store","createStore","composeWithDevTools","applyMiddleware","thunk","ApolloProvider","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.4b367ae9.chunk.js","sourcesContent":["export const login = (userData) => {\n  return async (dispatch) => {\n    localStorage.setItem('jwtToken', userData.token)\n    localStorage.setItem('user', JSON.stringify(userData))\n    dispatch({\n      type: 'LOGIN',\n      payload: {\n        email: userData.email,\n        id: userData.id,\n        profileImage: userData.profileImage,\n        token: userData.token,\n        username: userData.username,\n      },\n    })\n  }\n}\n\nexport const logout = () => {\n  localStorage.clear()\n  return async (dispatch) => {\n    dispatch({\n      type: 'LOGOUT',\n    })\n  }\n}\n\nexport const updateUser = (userData) => {\n  localStorage.setItem('user', JSON.stringify(userData))\n  return async (dispatch) => {\n    dispatch({\n      type: 'UPDATE_USER',\n      payload: {\n        email: userData.email,\n        id: userData.id,\n        profileImage: userData.profileImage,\n        token: userData.token,\n        username: userData.username,\n      },\n    })\n  }\n}\n\nexport const isUserLoggedIn = () => {\n  return async (dispatch) => {\n    const token = localStorage.getItem('jwtToken')\n    if (token) {\n      const user = JSON.parse(localStorage.getItem('user'))\n      dispatch({\n        type: 'LOGIN',\n        payload: user,\n      })\n    }\n  }\n}\n","import gql from 'graphql-tag'\n\nexport const FETCH_POSTS_QUERY = gql`\n  {\n    getPosts {\n      id\n      body\n      createdAt\n      username\n      likeCount\n      likes {\n        username\n        userId\n      }\n      userId\n      commentCount\n      comments {\n        id\n        username\n        createdAt\n        body\n        userId\n      }\n    }\n  }\n`\n\nexport const GET_NOTIFICATIONS_QUERY = gql`\n  query GetNotifications($userId: String!) {\n    getNotifications(userId: $userId) {\n      id\n      message\n      postId\n      userId\n      createdAt\n      read\n    }\n  }\n`\n\nexport const GET_USER = gql`\n  query GetUser($userId: ID!) {\n    getUser(userId: $userId) {\n      id\n      username\n      profileImage\n    }\n  }\n`\nexport const CREATE_NOTIFICATION = gql`\n  mutation CreateNotification(\n    $postId: String!\n    $userId: String!\n    $message: String!\n  ) {\n    createNotification(postId: $postId, message: $message, userId: $userId) {\n      id\n      message\n      postId\n      userId\n      createdAt\n      read\n    }\n  }\n`\n\nexport const UPDATE_NOTIFICATION = gql`\n  mutation UpdateNotification($id: ID!) {\n    updateNotification(id: $id) {\n      id\n    }\n  }\n`\n\nexport const DELETE_NOTIFICATION = gql`\n  mutation DeleteNotification($id: ID!) {\n    deleteNotification(id: $id)\n  }\n`\n","import React from 'react'\nimport { BiTrash, BiCheck } from 'react-icons/bi'\nfunction DropDownMenu(props) {\n  function handleEdit() {\n    if (props.notification) {\n      props.updateNotification()\n    }\n  }\n\n  function handleDelete() {\n    if (!props.notification) {\n      props.setShowDeleteModal(true)\n      props.setOpen(false)\n    } else {\n      props.deleteNotification()\n    }\n  }\n  function DropdownItem(props) {\n    return (\n      // eslint-disable-next-line jsx-a11y/anchor-is-valid\n      <button href='#' onClick={props.handleDropdown} className='menu-item'>\n        {props.children}\n      </button>\n    )\n  }\n\n  return (\n    <div className={props.notification ? 'notification dropdown' : 'dropdown'}>\n      <div className='square'></div>\n      {props.notification && (\n        <DropdownItem handleDropdown={handleEdit}>\n          {props.notification ? (\n            <>\n              <BiCheck />\n              <span>Mark Read</span>\n            </>\n          ) : (\n            <> </>\n          )}\n        </DropdownItem>\n      )}\n\n      <DropdownItem handleDropdown={handleDelete}>\n        <BiTrash style={{ color: 'red' }} />\n        <span>Delete</span>\n      </DropdownItem>\n    </div>\n  )\n}\n\nexport default DropDownMenu\n","import React, { useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport DropDownMenu from './DropDownMenu.js'\nimport moment from 'moment'\nimport { BsThreeDots } from 'react-icons/bs'\nimport {\n  DELETE_NOTIFICATION,\n  GET_NOTIFICATIONS_QUERY,\n  UPDATE_NOTIFICATION,\n} from '../util/graphql.js'\nimport { useMutation } from '@apollo/react-hooks'\nfunction NotificationCard(props) {\n  const { notification, deactivateNotification } = props\n  const [open, setOpen] = useState(false)\n  const notificationMenu = () => {\n    setOpen(!open)\n  }\n  const [deleteNotificationMutation] = useMutation(DELETE_NOTIFICATION, {\n    update(proxy) {\n      setOpen(false)\n      const data = proxy.readQuery({\n        query: GET_NOTIFICATIONS_QUERY,\n        variables: { userId: props.userId },\n      })\n      proxy.writeQuery({\n        query: GET_NOTIFICATIONS_QUERY,\n        data: {\n          getNotifications: data.getNotifications.filter(\n            (n) => n.id !== props.notification.id\n          ),\n        },\n        variables: { userId: props.userId },\n      })\n    },\n    variables: {\n      id: notification.id,\n    },\n  })\n\n  const [updateNotificationMutation] = useMutation(UPDATE_NOTIFICATION, {\n    update(proxy) {\n      setOpen(false)\n      const data = proxy.readQuery({\n        query: GET_NOTIFICATIONS_QUERY,\n        variables: { userId: props.userId },\n      })\n      proxy.writeQuery({\n        query: GET_NOTIFICATIONS_QUERY,\n        data: {\n          getNotifications: data.getNotifications.map((n) =>\n            n.id === props.notification.id ? (n.read = true) : (n.read = false)\n          ),\n        },\n        variables: { userId: props.userId },\n      })\n    },\n    variables: {\n      id: notification.id,\n    },\n  })\n\n  const updateNotification = () => {\n    updateNotificationMutation()\n  }\n\n  return (\n    <div className='notificationCard'>\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'space-between',\n          padding: '5px',\n        }}\n      >\n        <Link\n          onClick={() => {\n            deactivateNotification(notification.id)\n          }}\n          to={`/posts/${notification.postId}`}\n        >\n          <div>{notification.message}</div>\n          <span>{moment(notification.createdAt).fromNow(true) + ' ago'}</span>\n        </Link>\n        <div\n          onClick={notificationMenu}\n          className={open ? 'notificationMenu hoverMenu' : 'notificationMenu'}\n        >\n          <BsThreeDots onClick={notificationMenu} />\n        </div>\n\n        {open && (\n          <>\n            <DropDownMenu\n              deleteNotification={deleteNotificationMutation}\n              updateNotification={updateNotification}\n              notification='notification'\n              setOpen={setOpen}\n            />\n          </>\n        )}\n        {!notification.read && <div className='activeNoitification'></div>}\n      </div>\n    </div>\n  )\n}\n\nexport default NotificationCard\n","import React, { useState, useEffect, useRef } from 'react'\nimport { Nav } from 'react-bootstrap'\nimport { Link } from 'react-router-dom'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useQuery, useMutation } from '@apollo/react-hooks'\nimport { logout } from '../actions'\nimport { IoNotifications } from 'react-icons/io5'\nimport {\n  GET_NOTIFICATIONS_QUERY,\n  UPDATE_NOTIFICATION,\n} from '../util/graphql.js'\n\nimport NotificationCard from './NotificationCard.js'\nfunction MenuBar() {\n  const [user, setUser] = useState(null)\n  const [show, setShow] = useState(false)\n  const [menu, showMenu] = useState(false)\n  const node = useRef()\n\n  const handleClose = () => setShow(false)\n  const handleShow = () => setShow(true)\n  let notificationsLength = 0\n  let notifications = null\n  const dispatch = useDispatch()\n  const auth = useSelector((state) => state.auth.user)\n  const { data, refetch } = useQuery(GET_NOTIFICATIONS_QUERY, {\n    variables: { userId: user ? user.id : '' },\n  })\n  useEffect(() => {\n    let modalContainer = document.querySelectorAll('.notificationModal')[0]\n\n    if (modalContainer && show) {\n      let modalContainer = document.querySelectorAll('.notificationModal')[0]\n      modalContainer.classList.add('display')\n    } else if (modalContainer && !show) {\n      modalContainer.classList.remove('display')\n    }\n  }, [show])\n  useEffect(() => {\n    document.addEventListener('mousedown', handleClick)\n\n    return () => {\n      document.removeEventListener('mousedown', handleClick)\n    }\n  })\n  useEffect(() => {\n    if (notificationsLength === 0) {\n      showMenu(false)\n    }\n  }, [notificationsLength])\n  const handleClick = (e) => {\n    if (node.current) {\n      if (node.current.contains(e.target)) {\n        // inside click\n        return\n      }\n    }\n    // outside click\n    handleClose()\n  }\n\n  if (data) {\n    notifications = data.getNotifications\n    let unRead = data.getNotifications.filter(\n      (notification) => notification.read === false\n    )\n    notificationsLength = unRead.length\n  }\n  const notificationMenu = (e) => {\n    handleShow()\n    showMenu(true)\n  }\n  useEffect(() => {\n    if (auth) {\n      setUser(auth)\n    } else {\n      setUser(null)\n    }\n  }, [auth])\n  const showNotifications = () => {\n    handleShow()\n  }\n  const [updateNotification] = useMutation(UPDATE_NOTIFICATION, {\n    onCompleted: () => {\n      refetch()\n    },\n  })\n\n  const deactivateNotification = (id) => {\n    updateNotification({ variables: { id: id } })\n    handleClose()\n  }\n  const menuBar =\n    user != null ? (\n      <>\n        <Nav defaultActiveKey='/' as='ul' className='loggedInNavBar'>\n          <Nav.Item as='li'>\n            <Nav.Link href='/'>Social Network</Nav.Link>\n          </Nav.Item>\n\n          <div className='rightMenu'>\n            <Nav.Item>\n              <div className='notificationIcon'>\n                <button onClick={showNotifications}>\n                  <IoNotifications />\n                </button>\n\n                {notifications && notificationsLength > 0 && (\n                  <span className='notificationCount'>\n                    {notificationsLength}\n                  </span>\n                )}\n              </div>\n            </Nav.Item>\n            <Nav.Item as='li'>\n              <Nav.Link href={`/profile/${user.id}`}>{user.username}</Nav.Link>\n            </Nav.Item>\n            <Nav.Item\n              as='li'\n              onClick={() => {\n                dispatch(logout())\n              }}\n            >\n              <Link className='nav-link' to={`/login`}>\n                Logout\n              </Link>\n            </Nav.Item>\n          </div>\n          <div ref={node} className='notificationModal'>\n            <h1>Notifications</h1>\n            {notifications &&\n              notifications.map((notification, index) => (\n                <NotificationCard\n                  key={index}\n                  deactivateNotification={deactivateNotification}\n                  notificationMenu={notificationMenu}\n                  menu={menu}\n                  notification={notification}\n                  userId={user ? user.id : ''}\n                />\n              ))}\n          </div>\n        </Nav>\n      </>\n    ) : (\n      //login register\n      <Nav defaultActiveKey='/' as='ul' className='loggedInNavBar'>\n        <Nav.Item as='li'>\n          <Nav.Link href='/'>Social Network</Nav.Link>\n        </Nav.Item>\n        <div className='rightMenu'>\n          <Nav.Item name='login' as='li'>\n            <Nav.Link href={`/login`}>Login</Nav.Link>\n          </Nav.Item>\n          <Nav.Item as='li' name='register'>\n            <Nav.Link href='/register'>Register</Nav.Link>\n          </Nav.Item>\n        </div>\n      </Nav>\n    )\n\n  return menuBar\n}\n\nexport default MenuBar\n","import React, { useEffect, useState } from 'react'\nimport { useMutation } from '@apollo/react-hooks'\nimport gql from 'graphql-tag'\nimport { FcLikePlaceholder, FcLike } from 'react-icons/fc'\nimport { CREATE_NOTIFICATION } from '../util/graphql.js'\nfunction LikeButton({ user, post: { userId, id, likeCount, likes } }) {\n  const [liked, setLiked] = useState(false)\n\n  useEffect(() => {\n    if (user && likes.find((like) => like.userId === user.id)) {\n      setLiked(true)\n    } else setLiked(false)\n  }, [user, likes])\n\n  const [likePost] = useMutation(LIKE_POST_MUTATION, {\n    variables: { postId: id },\n    onCompleted: () => {\n      setLiked(!liked)\n      if (!liked) {\n        //Only create notification when user has liked and is not user own post\n        if (userId !== user.id) {\n          createLikeNotification()\n        }\n      }\n    },\n  })\n\n  const [createLikeNotification] = useMutation(CREATE_NOTIFICATION, {\n    variables: {\n      message: user ? `${user.username} liked your post` : '',\n      postId: id,\n      userId: userId ? userId : '',\n    },\n    onError(err) {\n      console.log(err)\n    },\n  })\n\n  const likeButton = user ? (\n    liked ? (\n      <button className='likedButton'>\n        <FcLike onClick={likePost} style={{ fontSize: '20px' }} />\n      </button>\n    ) : (\n      <button className='likeButton'>\n        <FcLikePlaceholder\n          onClick={likePost}\n          style={{ pointerEvents: 'auto', fontSize: '20px' }}\n        />\n      </button>\n    )\n  ) : (\n    <FcLikePlaceholder\n      // as={Link}\n      className='likeButton'\n      // to='/login'\n      style={{ fontSize: '20px' }}\n    />\n  )\n\n  return (\n    <>\n      {likeButton} <span className='commentAndLikeCount'>{likeCount}</span>\n    </>\n  )\n}\n\nconst LIKE_POST_MUTATION = gql`\n  mutation likePost($postId: ID!) {\n    likePost(postId: $postId) {\n      id\n      likes {\n        id\n        username\n        userId\n      }\n      likeCount\n    }\n  }\n`\nexport default LikeButton\n","import React from 'react'\nimport { Modal } from 'react-bootstrap'\nfunction PopupModal(props) {\n  return (\n    <>\n      <Modal\n        className='popUp-modal'\n        show={props.show}\n        onHide={props.handleClose}\n      >\n        <Modal.Header>\n          <Modal.Title>{props.title}</Modal.Title>\n        </Modal.Header>\n      </Modal>\n    </>\n  )\n}\n\nexport default PopupModal\n","import React, { useState } from 'react'\nimport gql from 'graphql-tag'\nimport { useMutation } from '@apollo/react-hooks'\nimport { FETCH_POSTS_QUERY } from '../../util/graphql.js'\nimport { Modal, Button } from 'react-bootstrap'\nimport PopupModal from '../PopupModal.js'\n\nfunction DeleteModal(props) {\n  const mutation = props.comment_id\n    ? DELETE_COMMENT_MUTATION\n    : DELETE_POST_MUTATION\n  const title = props.comment_id\n    ? 'Delete Comment'\n    : props.post_id\n    ? 'Delete Post'\n    : 'Delete Notification'\n  const [popup, setPopup] = useState(false)\n  const [deletePostOrMutation] = useMutation(mutation, {\n    update(proxy) {\n      props.onHide()\n      if (props.post_id) {\n        const data = proxy.readQuery({\n          query: FETCH_POSTS_QUERY,\n        })\n        proxy.writeQuery({\n          query: FETCH_POSTS_QUERY,\n          data: {\n            getPosts: data.getPosts.filter((p) => p.id !== props.post_id),\n          },\n        })\n\n        if (props.callback) {\n          props.callback()\n        }\n      }\n    },\n    variables: {\n      postId: props.post_id,\n      commentId: props.comment_id,\n    },\n  })\n\n  function onDelete() {\n    setPopup(true)\n    deletePostOrMutation()\n  }\n\n  function handleClosePopup() {\n    setPopup(false)\n  }\n  return (\n    <Modal\n      {...props}\n      size='sm'\n      aria-labelledby='contained-modal-title-vcenter'\n      centered\n      className='deleteModal'\n    >\n      <Modal.Body className='deletePostBody'>\n        <h4>{title}</h4>\n        <p>This cannot be undone and will be removed from your profile.</p>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button onClick={props.onHide}>Close</Button>\n        <Button onClick={onDelete}>Delete</Button>\n      </Modal.Footer>\n      <PopupModal\n        title='Deleting...'\n        show={popup}\n        handleClosePopup={handleClosePopup}\n      ></PopupModal>\n    </Modal>\n  )\n}\n\nconst DELETE_POST_MUTATION = gql`\n  mutation deletePost($postId: ID!) {\n    deletePost(postId: $postId)\n  }\n`\n\nconst DELETE_COMMENT_MUTATION = gql`\n  mutation deleteComment($postId: ID!, $commentId: ID!) {\n    deleteComment(postId: $postId, commentId: $commentId) {\n      id\n      comments {\n        id\n        username\n        createdAt\n        body\n      }\n      commentCount\n    }\n  }\n`\n\nexport default DeleteModal\n","import React, { useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\nimport LikeButton from './LikeButton.js'\nimport { Row, Col } from 'react-bootstrap'\nimport { BiCommentDots } from 'react-icons/bi'\nimport { BsThreeDots } from 'react-icons/bs'\nimport DeleteModal from '../components/Modals/DeleteModal.js'\nimport DropDownMenu from '../components/DropDownMenu.js'\nimport { useQuery } from '@apollo/react-hooks'\nimport { GET_USER } from '../util/graphql'\nfunction PostCard({ post, userInfo }) {\n  const { body, createdAt, id, userId, likeCount, commentCount, likes } = post\n  let postUser = {}\n\n  const [open, setOpen] = useState(false)\n  const [showDeleteModal, setShowDeleteModal] = useState(false)\n\n  const { data } = useQuery(GET_USER, {\n    variables: { userId: userId },\n  })\n\n  if (data) {\n    postUser = data.getUser\n  }\n\n  return (\n    <>\n      <div className='postCardContainer'>\n        <Row>\n          <Col xs={2}>\n            <img src={postUser.profileImage} alt='' />\n          </Col>\n          <Col xs={10}>\n            <Row xs={2} className='justify-content-md-center postBody'>\n              {open && (\n                <DropDownMenu\n                  setShowDeleteModal={setShowDeleteModal}\n                  setOpen={setOpen}\n                />\n              )}\n              <Col xs={12}>\n                <Row>\n                  <div>\n                    <span>{[postUser.username]}</span>\n                    <span>{moment(createdAt).fromNow(true) + ' ago'}</span>\n                    {userInfo && userInfo.id === userId ? (\n                      <BsThreeDots onClick={() => setOpen(!open)}></BsThreeDots>\n                    ) : null}\n                  </div>\n                </Row>\n              </Col>\n              <Col style={{ height: '70px' }} xs={12}>\n                {body}\n              </Col>\n              <Col className='align-text-bottom' xs={12}>\n                <Link to={`/posts/${id}`}>\n                  <BiCommentDots style={{ fontSize: '22px' }} />\n                </Link>\n                <span className='commentAndLikeCount'>{commentCount}</span>\n                <LikeButton\n                  user={userInfo}\n                  post={{ id, likes, userId, likeCount }}\n                />\n              </Col>\n            </Row>\n          </Col>\n        </Row>\n        <DeleteModal\n          post_id={id}\n          show={showDeleteModal}\n          onHide={() => setShowDeleteModal(false)}\n        />\n      </div>\n    </>\n  )\n}\nexport default PostCard\n","import { useState } from 'react'\n\nexport const useForm = (callback, initialState = {}) => {\n  const [values, setValues] = useState(initialState)\n\n  const onChange = (event) => {\n    setValues({ ...values, [event.target.name]: event.target.value })\n  }\n\n  const onSubmit = (event) => {\n    event.preventDefault()\n    callback()\n  }\n  const resetValues = () => {\n    setValues({})\n  }\n  return {\n    onChange,\n    onSubmit,\n    resetValues,\n    values,\n  }\n}\n","import React, { useRef } from 'react'\nimport { Modal, Button, Form } from 'react-bootstrap'\nimport { GrFormClose } from 'react-icons/gr'\nimport gql from 'graphql-tag'\nimport { useMutation } from '@apollo/react-hooks'\nimport { useForm } from '../../util/hooks'\nimport { FETCH_POSTS_QUERY } from '../../util/graphql'\n\nfunction CreatePostModal(props) {\n  const textArea = useRef()\n  const { values, onChange, onSubmit } = useForm(createPostCallback, {\n    body: '',\n  })\n\n  const [createPost, { error }] = useMutation(CREATE_POST_MUTATION, {\n    variables: values,\n    update(proxy, result) {\n      const data = proxy.readQuery({\n        query: FETCH_POSTS_QUERY,\n      })\n      proxy.writeQuery({\n        query: FETCH_POSTS_QUERY,\n        data: {\n          getPosts: [result.data.createPost, ...data.getPosts],\n        },\n      })\n\n      values.body = ''\n    },\n  })\n  //character count 250 or less\n  const handlePost = (e) => {\n    props.onHide()\n    onSubmit(e)\n    createPost()\n  }\n  function createPostCallback() {}\n  return (\n    <Modal\n      {...props}\n      size='lg'\n      aria-labelledby='contained-modal-title-vcenter'\n      centered\n      className='createPostModal'\n      onEntered={() => textArea.current.focus()}\n    >\n      <Modal.Header>\n        <Modal.Title id='contained-modal-title-vcenter'>\n          <h1>Create Post</h1>\n        </Modal.Title>\n        <button onClick={props.onHide} className='closeCreateFormModal'>\n          <GrFormClose />\n        </button>\n      </Modal.Header>\n      <Modal.Body>\n        <Form.Group controlId='exampleForm.ControlTextarea1'>\n          <Form.Control\n            className='createPostFormModal'\n            placeholder={`What's on your mind, ${props.username}?`}\n            onChange={onChange}\n            name={'body'}\n            value={values.body}\n            as='textarea'\n            rows={3}\n            ref={textArea}\n            error={error ? true : undefined}\n          />\n        </Form.Group>\n      </Modal.Body>\n      <Modal.Footer>\n        {values.body !== '' ? (\n          <Button className='postButton' onClick={handlePost}>\n            Post\n          </Button>\n        ) : (\n          <Button\n            className='postButton'\n            onClick={handlePost}\n            style={{ backgroundColor: 'gray', pointerEvents: 'none' }}\n          >\n            Post\n          </Button>\n        )}\n      </Modal.Footer>\n    </Modal>\n  )\n}\n\nconst CREATE_POST_MUTATION = gql`\n  mutation createPost($body: String!) {\n    createPost(body: $body) {\n      id\n      body\n      createdAt\n      username\n      userId\n      likes {\n        id\n        username\n        createdAt\n      }\n      likeCount\n      comments {\n        id\n        body\n        username\n        createdAt\n      }\n      commentCount\n    }\n  }\n`\nexport default CreatePostModal\n","import React, { useEffect, useState } from 'react'\nimport { useQuery } from '@apollo/react-hooks'\nimport { FETCH_POSTS_QUERY } from '../util/graphql'\nimport PostCard from '../components/PostCard'\nimport { Row, Col, InputGroup, FormControl } from 'react-bootstrap'\nimport CreatePostModal from '../components/Modals/CreatePostModal.js'\nimport { useSelector } from 'react-redux'\nfunction Home() {\n  const [user, setUser] = useState(null)\n  const auth = useSelector((state) => state.auth.user)\n\n  const { loading, data: { getPosts: posts } = {} } =\n    useQuery(FETCH_POSTS_QUERY)\n\n  const [modalShow, setModalShow] = useState(false)\n\n  useEffect(() => {\n    if (auth) {\n      setUser(auth)\n    } else {\n      setUser(null)\n    }\n  }, [auth])\n\n  return (\n    <>\n      {user && (\n        <div className='postsList'>\n          <div className='postCardContainer'>\n            <Col xs={12}>\n              <Row xs={2} className='justify-content-md-center createPostBody'>\n                <Col className='h-20' xs={12}>\n                  <div>Post Something</div>\n                  <hr />\n                </Col>\n                <Col className='h-80' xs={12}>\n                  <Row>\n                    <Col xs={1}>\n                      <img\n                        style={{\n                          marginLeft: '5px',\n                          marginTop: '0px',\n                          width: '50px',\n                        }}\n                        src={user.profileImage}\n                        alt=''\n                      />\n                    </Col>\n                    <Col xs={11}>\n                      <InputGroup className='mb-3 createPostForm'>\n                        <FormControl\n                          placeholder={`What's on your mind, ${user.username}?`}\n                          aria-label='createPostForm'\n                          aria-describedby='basic-addon1'\n                          onClick={() => setModalShow(true)}\n                          style={{ cursor: 'pointer' }}\n                          readOnly\n                        />\n                      </InputGroup>\n                    </Col>\n                  </Row>\n                </Col>\n              </Row>\n            </Col>\n          </div>\n        </div>\n      )}\n      {loading ? (\n        <div className='loader'>Loading...</div>\n      ) : (\n        <div className='postsList'>\n          <>\n            {posts &&\n              posts.map((post, index) => (\n                <PostCard key={index} post={post} userInfo={user} />\n              ))}\n          </>\n        </div>\n      )}\n\n      <CreatePostModal\n        username={user ? user.username : undefined}\n        show={modalShow}\n        onHide={() => setModalShow(false)}\n      />\n    </>\n  )\n}\n\nexport default Home\n","import React, { useState } from 'react'\nimport { useMutation } from '@apollo/react-hooks'\nimport gql from 'graphql-tag'\nimport { login } from '../actions'\nimport { useForm } from '../util/hooks'\nimport { Form, Button } from 'react-bootstrap'\nimport { useDispatch } from 'react-redux'\nfunction Login(props) {\n  const [errors, setErrors] = useState({})\n  const dispatch = useDispatch()\n  const { onChange, onSubmit, values } = useForm(loginUserCallback, {\n    username: '',\n    email: '',\n  })\n  const [loginUser, { loading }] = useMutation(LOGIN_USER, {\n    update(_, { data: { login: userData } }) {\n      dispatch(login(userData))\n      props.history.push('/')\n    },\n    onError(err) {\n      setErrors(err.graphQLErrors[0].extensions.exception.errors)\n    },\n    variables: values,\n  })\n\n  function loginUserCallback() {\n    loginUser()\n  }\n\n  return (\n    <div className='container'>\n      {loading ? (\n        <div className='loader'>Loading</div>\n      ) : (\n        <div className='form-container'>\n          <Form onSubmit={onSubmit}>\n            <h1>Login</h1>\n            <Form.Group controlId='formBasicEmail'>\n              <Form.Label>Email</Form.Label>\n              <Form.Control\n                type='email'\n                name='email'\n                placeholder='Enter email'\n                value={values.email}\n                error={errors.email ? true : undefined}\n                onChange={onChange}\n              />\n            </Form.Group>\n\n            <Form.Group controlId='formBasicPassword'>\n              <Form.Label>Password</Form.Label>\n              <Form.Control\n                type='password'\n                name='password'\n                placeholder='Password'\n                value={values.password == null ? '' : values.password}\n                error={errors.password ? true : undefined}\n                onChange={onChange}\n              />\n            </Form.Group>\n            <Button className='formSubmit' variant='primary' type='submit'>\n              Login\n            </Button>\n          </Form>\n\n          {Object.keys(errors).length > 0 && (\n            <div className='ui error message'>\n              <ul className='list'>\n                {Object.values(errors).map((value) => (\n                  <li key={value}>{value}</li>\n                ))}\n              </ul>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default Login\n\nconst LOGIN_USER = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      id\n      email\n      username\n      createdAt\n      profileImage\n      token\n    }\n  }\n`\n","import React, { useState } from 'react'\nimport { Form, Button } from 'react-bootstrap'\nimport { useMutation } from '@apollo/react-hooks'\nimport gql from 'graphql-tag'\nimport { login } from '../actions'\nimport { useForm } from '../util/hooks'\nimport { useDispatch } from 'react-redux'\n\nfunction Register(props) {\n  const [errors, setErrors] = useState({})\n\n  const dispatch = useDispatch()\n  const { onChange, onSubmit, values } = useForm(registerUser, {\n    username: '',\n    email: '',\n    password: '',\n    confirmPassword: '',\n  })\n\n  const [addUser, { loading }] = useMutation(REGISTER_USER, {\n    update(_, { data: { register: userData } }) {\n      dispatch(login(userData))\n\n      props.history.push('/')\n    },\n    onError(err) {\n      setErrors(err.graphQLErrors[0].extensions.exception.errors)\n    },\n    variables: values,\n  })\n\n  function registerUser() {\n    addUser()\n  }\n\n  return (\n    <>\n      {' '}\n      {!loading ? (\n        <div style={{ marginTop: '10px' }} className='form-container'>\n          <Form onSubmit={onSubmit}>\n            <h1>Regsiter</h1>\n\n            <Form.Group>\n              <Form.Label>Username</Form.Label>\n              <Form.Control\n                type='username'\n                name='username'\n                placeholder='Enter Username'\n                value={values.username}\n                error={errors.username ? true : undefined}\n                onChange={onChange}\n              />\n            </Form.Group>\n            <Form.Group>\n              <Form.Label>Email</Form.Label>\n              <Form.Control\n                type='email'\n                name='email'\n                placeholder='Enter Email'\n                value={values.email}\n                error={errors.email ? true : undefined}\n                onChange={onChange}\n              />\n            </Form.Group>\n\n            <Form.Group>\n              <Form.Label>Password</Form.Label>\n              <Form.Control\n                type='password'\n                name='password'\n                placeholder='Password'\n                value={values.password}\n                error={errors.password ? true : undefined}\n                onChange={onChange}\n              />\n            </Form.Group>\n            <Form.Group>\n              <Form.Label>Confirm Password</Form.Label>\n              <Form.Control\n                type='password'\n                name='confirmPassword'\n                placeholder='Confirm Password'\n                value={values.confirmPassword}\n                error={errors.confirmPassword ? true : undefined}\n                onChange={onChange}\n              />\n            </Form.Group>\n            <Button className='formSubmit' variant='primary' type='submit'>\n              Register\n            </Button>\n          </Form>\n          {Object.keys(errors).length > 0 && (\n            <div className='ui error message'>\n              <ul className='list'>\n                {Object.values(errors).map((value) => (\n                  <li key={value}>{value}</li>\n                ))}\n              </ul>\n            </div>\n          )}\n        </div>\n      ) : (\n        <div className='loader'>Loading...</div>\n      )}\n    </>\n  )\n}\n\nconst REGISTER_USER = gql`\n  mutation register(\n    $username: String!\n    $email: String!\n    $password: String!\n    $confirmPassword: String!\n  ) {\n    register(\n      registerInput: {\n        username: $username\n        email: $email\n        password: $password\n        confirmPassword: $confirmPassword\n      }\n    ) {\n      id\n      email\n      username\n      createdAt\n      profileImage\n      token\n    }\n  }\n`\n\nexport default Register\n","import React, { useState } from 'react'\nimport DropDownMenu from '../components/DropDownMenu.js'\nimport { Row, Col } from 'react-bootstrap'\nimport moment from 'moment'\nimport DeleteModal from '../components/Modals/DeleteModal.js'\nimport { BsThreeDots } from 'react-icons/bs'\n\nfunction CommentCard(props) {\n  const { comment, user, postId } = props\n  const [open, setOpen] = useState(false)\n  const [showDeleteModal, setShowDeleteModal] = useState(false)\n\n  return (\n    <>\n      {' '}\n      <Row>\n        <Col xs={1}>\n          <img size='small' src={comment.image} float='right' alt='none' />\n        </Col>\n        <Col xs={11}>\n          <Row className='commentBody'>\n            {open && (\n              <DropDownMenu\n                setShowDeleteModal={setShowDeleteModal}\n                setOpen={setOpen}\n              />\n            )}\n            <Col xs={12}>\n              <span>{comment.username}</span>\n              <span>{moment(comment.createdAt).fromNow(true) + ' ago'}</span>\n              {user && user.id === comment.userId ? (\n                <BsThreeDots\n                  className='editModal'\n                  onClick={() => setOpen(!open)}\n                />\n              ) : null}\n            </Col>\n            <Col xs={12}>\n              <div>{comment.body}</div>\n            </Col>\n          </Row>\n        </Col>\n      </Row>{' '}\n      <DeleteModal\n        post_id={postId}\n        comment_id={comment.id}\n        show={showDeleteModal}\n        onHide={() => setShowDeleteModal(false)}\n      />\n    </>\n  )\n}\n\nexport default CommentCard\n","import React, { useState, useRef, useEffect } from 'react'\nimport gql from 'graphql-tag'\nimport { useQuery, useMutation } from '@apollo/react-hooks'\nimport moment from 'moment'\nimport { Row, Col, FormControl, InputGroup, Button } from 'react-bootstrap'\nimport CommentCard from '../components/CommentCard.js'\nimport { useSelector } from 'react-redux'\nimport { CREATE_NOTIFICATION, GET_USER } from '../util/graphql.js'\nfunction SinglePost(props) {\n  const postId = props.match.params.postId\n  const auth = useSelector((state) => state.auth.user)\n  const [user, setUser] = useState(null)\n  const [comment, setComment] = useState('')\n  const commentInputRef = useRef(null)\n  let postInfo = null\n  let postUser = null\n  useEffect(() => {\n    if (auth) {\n      setUser(auth)\n    } else {\n      setUser(null)\n    }\n  }, [auth])\n\n  const { data, error } = useQuery(FETCH_POST_QUERY, {\n    onError(error) {\n      console.log(error)\n    },\n    variables: { postId: postId },\n  })\n\n  if (error) {\n    console.log(error)\n  }\n\n  if (data) {\n    postInfo = data.getPost\n  }\n  const { data: postUserData } = useQuery(GET_USER, {\n    variables: {\n      userId: postInfo ? postInfo.userId : '',\n    },\n  })\n\n  if (postUserData) {\n    postUser = postUserData.getUser\n  }\n\n  const [submitComment] = useMutation(SUBMIT_COMMENT_MUTATION, {\n    update() {\n      setComment('')\n      if (postInfo.userId !== user.id) {\n        createCommentNotification()\n      }\n      commentInputRef.current.blur()\n    },\n    variables: {\n      postId,\n      body: comment,\n      commenterId: user ? user.id : '', //the user who is commenting\n    },\n  })\n  const [createCommentNotification] = useMutation(CREATE_NOTIFICATION, {\n    variables: {\n      message: user ? `${user.username} commented on your post` : '',\n      postId: postId,\n      userId: postInfo ? postInfo.userId : '', //the user that posted the post.\n    },\n    onError(err) {\n      console.log(err)\n    },\n  })\n\n  return (\n    <>\n      {postInfo ? (\n        <>\n          <div className='singlePostContainer'>\n            <Row>\n              <Col xs={2}>\n                <img src={postUser ? postUser.profileImage : ''} alt='' />\n              </Col>\n              <Col xs={10}>\n                <Row xs={2} className='justify-content-md-center postBody'>\n                  <Col xs={12}>\n                    <Row>\n                      <div>\n                        <span>{postInfo.username}</span>\n                        <span>\n                          {moment(postInfo.createdAt).fromNow(true) + ' ago'}\n                        </span>\n                      </div>\n                    </Row>\n                  </Col>\n                  <Col style={{ height: '70px' }} xs={12}>\n                    {postInfo.body}\n                  </Col>\n                  <Col className='align-text-bottom' xs={12}></Col>\n                </Row>\n              </Col>\n              <Col xs={12}>\n                <Row\n                  xs={2}\n                  className='justify-content-md-center createPostBody'\n                >\n                  <Col className='h-20' xs={12}>\n                    <div>{`${postInfo.comments.length} comments`}</div>\n\n                    <hr />\n                  </Col>\n                  {user ? (\n                    <Col className='h-80' xs={12}>\n                      <Row>\n                        <Col xs={10}>\n                          <InputGroup className='mb-3 createPostForm'>\n                            <FormControl\n                              placeholder={`What's on your mind, ${user.username}?`}\n                              aria-label='createPostForm'\n                              aria-describedby='basic-addon1'\n                              onChange={(event) =>\n                                setComment(event.target.value)\n                              }\n                              value={comment}\n                              ref={commentInputRef}\n                            />\n                          </InputGroup>\n                        </Col>\n                        <Col xs={2}>\n                          <div className='submitComment'>\n                            <Button onClick={submitComment}>Submit</Button>\n                          </div>\n                        </Col>\n                      </Row>\n                    </Col>\n                  ) : null}{' '}\n                </Row>\n              </Col>\n              {postInfo.comments.map((comment, index) => (\n                // eslint-disable-next-line jsx-a11y/alt-text\n                <div className='commentContainer' key={index}>\n                  <CommentCard user={user} comment={comment} postId={postId} />\n                </div>\n              ))}\n            </Row>\n          </div>\n        </>\n      ) : (\n        <div className='loader'>Loading...</div>\n      )}\n    </>\n  )\n}\n\nconst SUBMIT_COMMENT_MUTATION = gql`\n  mutation ($postId: String!, $body: String!, $commenterId: String!) {\n    createComment(postId: $postId, body: $body, commenterId: $commenterId) {\n      id\n      comments {\n        id\n        body\n        createdAt\n        username\n        image\n        userId\n      }\n      commentCount\n    }\n  }\n`\n\nconst FETCH_POST_QUERY = gql`\n  query ($postId: ID!) {\n    getPost(postId: $postId) {\n      id\n      body\n      userId\n      createdAt\n      username\n      likeCount\n      likes {\n        username\n      }\n      commentCount\n      comments {\n        id\n        username\n        createdAt\n        body\n        image\n        userId\n      }\n    }\n  }\n`\n\nexport default SinglePost\n","import React from 'react'\nimport { VscChevronRight } from 'react-icons/vsc'\nfunction UpdateInfo(props) {\n  const { imageHandler, profileImg } = props\n  if (props.name === 'PHOTO') {\n    return (\n      <>\n        {' '}\n        <div className='update_photo'>\n          <div className='info'>\n            <div>{props.name}</div>\n            <div>Add a photo to your account</div>\n          </div>\n          <div className='img-holder'>\n            <input\n              type='file'\n              accept='image/*'\n              name='image-upload'\n              id='profile_input'\n              onChange={imageHandler}\n            />\n            <label className='image-upload' htmlFor='profile_input'>\n              <img alt='none' src={profileImg} />\n            </label>\n          </div>{' '}\n        </div>\n        <hr />\n      </>\n    )\n  }\n  return (\n    <>\n      {' '}\n      <div onClick={props.handleUpdateInfo} className='update_item'>\n        <div className='info'>\n          <div>{props.name}</div>\n          <div>{props.value}</div>\n        </div>\n        <div className='update_icon'>\n          <VscChevronRight />\n        </div>\n      </div>\n      <hr />\n    </>\n  )\n}\n\nexport default UpdateInfo\n","import React, { useState } from 'react'\nimport { Modal, Button } from 'react-bootstrap'\nimport { Form } from 'react-bootstrap'\nimport PopupModal from '../../components/PopupModal.js'\n\nconst UpdateInfoModal = (props) => {\n  let error\n  const [empty, setEmpty] = useState({\n    email: false,\n    username: false,\n    confirmPassword: false,\n    password: false,\n    currentPassword: false,\n  })\n\n  function onClickSubmit() {\n    if (\n      props.type === 'Email' &&\n      document.getElementsByName('email')[0].value === ''\n    ) {\n      setEmpty((prevEmpty) => ({\n        ...prevEmpty,\n        email: true,\n      }))\n      error = true\n    }\n    if (\n      props.type === 'Username' &&\n      document.getElementsByName('username')[0].value === ''\n    ) {\n      setEmpty((prevEmpty) => ({\n        ...prevEmpty,\n        username: true,\n      }))\n      error = true\n    }\n    if (\n      props.type === 'Password' &&\n      document.getElementsByName('confirmPassword')[0].value === ''\n    ) {\n      setEmpty((prevEmpty) => ({\n        ...prevEmpty,\n        confirmPassword: true,\n      }))\n      error = true\n    }\n    if (\n      props.type === 'Password' &&\n      document.getElementsByName('currentPassword')[0].value === ''\n    ) {\n      setEmpty((prevEmpty) => ({\n        ...prevEmpty,\n        currentPassword: true,\n      }))\n      error = true\n    }\n    if (\n      props.type === 'Password' &&\n      document.getElementsByName('password')[0].value === ''\n    ) {\n      setEmpty((prevEmpty) => ({\n        ...prevEmpty,\n        password: true,\n      }))\n      error = true\n    }\n    if (!error) {\n      props.onShow(true)\n    }\n  }\n\n  return (\n    <Modal\n      {...props}\n      size='lg'\n      aria-labelledby='contained-modal-title-vcenter'\n      centered\n      className='updateInfoModal'\n    >\n      <Modal.Header>\n        <Modal.Title id='contained-modal-title-vcenter'>\n          {`Change ${props.type}`}\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Form onSubmit={props.onSubmit}>\n          {props.type === 'Email' && (\n            <>\n              <Form.Label>Current Email</Form.Label>\n              <Form.Control\n                type='text'\n                placeholder={props.user.email}\n                readOnly\n                className='disabledInput'\n              />\n              <Form.Control\n                type='text'\n                name='email'\n                onChange={props.onChange}\n                placeholder='New Email'\n              />\n            </>\n          )}\n          {props.type === 'Username' && (\n            <>\n              <Form.Label>Current Username</Form.Label>\n              <Form.Control\n                type='text'\n                placeholder={props.user.username}\n                readOnly\n                className='disabledInput'\n              />\n              <Form.Control\n                type='username'\n                placeholder='New Username'\n                onChange={props.onChange}\n                name='username'\n              />\n            </>\n          )}\n          {props.type === 'Password' && (\n            <>\n              <Form.Label>Current Password</Form.Label>\n              <Form.Control\n                type='password'\n                name='currentPassword'\n                placeholder='Current Password'\n              />\n              <Form.Control\n                type='password'\n                name='password'\n                onChange={props.onChange}\n                placeholder='New password'\n              />\n              <Form.Control\n                type='password'\n                name='confirmPassword'\n                onChange={props.onChange}\n                placeholder='Confirm new password'\n              />\n            </>\n          )}{' '}\n          {props.errors.confirmPassword ? (\n            <>\n              {' '}\n              <div className='modalError'>Passwords must match</div>\n            </>\n          ) : (\n            <> </>\n          )}\n          {props.errors.general ? (\n            <>\n              <div className='modalError'>Current password is incorrect</div>\n            </>\n          ) : (\n            <> </>\n          )}\n          {props.type === 'Username' && empty.username && (\n            <div className='modalError'>Fields must not be empty</div>\n          )}\n          {props.type === 'Email' && empty.email && (\n            <div className='modalError'>Email must not be empty</div>\n          )}\n          {props.type === 'Password' && empty.currentPassword && (\n            <div className='modalError'>Current Password must not be empty</div>\n          )}\n          {props.type === 'Password' && empty.password && (\n            <div className='modalError'>Password must not be empty</div>\n          )}\n          {props.type === 'Password' && empty.confirmPassword && (\n            <div className='modalError'>Confirm Password must not be empty</div>\n          )}\n          <div className='footer'>\n            <Button\n              className={props.showPopup && 'disableButton'}\n              onClick={props.onHide}\n            >\n              Cancel\n            </Button>\n            <Button onClick={onClickSubmit} variant='primary' type='submit'>\n              Submit\n            </Button>\n          </div>\n        </Form>\n      </Modal.Body>{' '}\n      <PopupModal\n        title='Updating...'\n        show={props.popup}\n        handleClose={props.handleClosePopup}\n      />\n    </Modal>\n  )\n}\n\nexport default UpdateInfoModal\n","import React, { useState, useEffect } from 'react'\nimport UpdateInfo from './UpdateInfo.js'\nimport UpdateInfoModal from './UpdateInfoModal.js'\nimport { useMutation } from '@apollo/react-hooks'\nimport { updateUser } from '../../actions'\nimport { gql } from '@apollo/client'\nimport { useForm } from '../../util/hooks'\nimport { useDispatch, useSelector } from 'react-redux'\nfunction Profile() {\n  const auth = useSelector((state) => state.auth.user)\n  const [show, setShow] = useState(false)\n  const [profileImg, setProfileImg] = useState('')\n  const dispatch = useDispatch()\n  const [updateModal, showUpdateModal] = useState(false)\n  const [user, setUser] = useState({})\n  const [updateType, setUpdateType] = useState('')\n  const { onChange, resetValues, onSubmit, values } = useForm(updateUserInfo)\n  const [username, setUsername] = useState('')\n  const [email, setEmail] = useState('')\n  const [errors, setErrors] = useState({})\n  const [changeUserInfo] = useMutation(UPDATE_USER, {\n    update(_, { data: { updateUser: userData } }) {\n      showUpdateModal(false)\n      setShow(false)\n      setEmail(userData.email)\n      setUsername(userData.username)\n      dispatch(updateUser(userData))\n      resetValues()\n    },\n    onError(err) {\n      setErrors(err.graphQLErrors[0].extensions.exception.errors)\n      setShow(false)\n      resetValues()\n    },\n    variables: {\n      ...values,\n      _id: user ? user.id : '',\n    },\n  })\n  useEffect(() => {\n    if (auth) {\n      setProfileImg(auth.profileImage)\n      setUsername(auth.username)\n      setEmail(auth.email)\n      setUser(auth)\n    }\n  }, [auth])\n  const [updateUserImage] = useMutation(ADD_PROFILE_IMAGE, {\n    onCompleted: (data) => dispatch(updateUser(data.addProfileImage)),\n  })\n  function updateUserInfo() {\n    if (values.password && values.confirmPassword && values.currentPassword) {\n      changeUserInfo()\n    } else if (values.username || values.email) {\n      changeUserInfo()\n    }\n  }\n  const imageHandler = (e) => {\n    const file = e.target.files[0]\n    const reader = new FileReader()\n    reader.onload = () => {\n      if (reader.readyState === 2) {\n        setProfileImg(reader.result)\n      }\n    }\n    if (!file) return\n\n    updateUserImage({\n      variables: { file, _id: user ? user.id : '' },\n    })\n    reader.readAsDataURL(e.target.files[0])\n  }\n  const handleUpdateUsername = (e) => {\n    showUpdateModal(!updateModal)\n    setUpdateType('Username')\n  }\n  const handleUpdatePassword = (e) => {\n    showUpdateModal(!updateModal)\n    setUpdateType('Password')\n  }\n  const handleUpdateEmail = (e) => {\n    showUpdateModal(!updateModal)\n    setUpdateType('Email')\n  }\n  return (\n    <>\n      {user ? (\n        <div className='profile_container'>\n          <h4>Account Info</h4>\n          <UpdateInfo\n            profileImg={profileImg}\n            imageHandler={imageHandler}\n            name='PHOTO'\n          />\n          <UpdateInfo\n            value={username}\n            handleUpdateInfo={handleUpdateUsername}\n            name='USERNAME'\n          />\n          <UpdateInfo\n            handleUpdateInfo={handleUpdateEmail}\n            value={email}\n            name='EMAIL'\n          />\n          <UpdateInfo\n            value='••••••••'\n            handleUpdateInfo={handleUpdatePassword}\n            name='PASSWORD'\n          />\n\n          <UpdateInfoModal\n            show={updateModal}\n            onHide={() => showUpdateModal(false)}\n            type={updateType}\n            user={user}\n            onChange={onChange}\n            onSubmit={onSubmit}\n            values={values}\n            errors={errors}\n            popup={show ? true : undefined}\n            onShow={setShow}\n          />\n        </div>\n      ) : (\n        <> </>\n      )}\n    </>\n  )\n}\n\nexport const ADD_PROFILE_IMAGE = gql`\n  mutation AddProfileImage($_id: String!, $file: FileUpload!) {\n    addProfileImage(_id: $_id, file: $file) {\n      username\n      email\n      profileImage\n      id\n    }\n  }\n`\nexport const UPDATE_USER = gql`\n  mutation UpdateUser(\n    $_id: String!\n    $email: String\n    $password: String\n    $username: String\n    $currentPassword: String\n    $confirmPassword: String\n  ) {\n    updateUser(\n      _id: $_id\n      email: $email\n      password: $password\n      username: $username\n      currentPassword: $currentPassword\n      confirmPassword: $confirmPassword\n    ) {\n      username\n      email\n      profileImage\n      id\n    }\n  }\n`\n\nexport default Profile\n","import React, { useEffect } from 'react'\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport { Container } from 'semantic-ui-react'\n\nimport 'semantic-ui-css/semantic.min.css'\nimport './App.css'\nimport MenuBar from './components/MenuBar'\nimport Home from './pages/Home'\nimport Login from './pages/Login'\nimport Register from './pages/Register'\nimport SinglePost from './pages/SinglePost'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport Profile from './pages/Profile/index.js'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { isUserLoggedIn } from './actions'\n\nfunction App() {\n  const dispatch = useDispatch()\n  const auth = useSelector((state) => state.auth)\n  useEffect(() => {\n    if (auth.user == null) {\n      dispatch(isUserLoggedIn())\n    }\n  })\n  return (\n    <Router>\n      <Container>\n        <MenuBar />\n        <Route exact path='/' component={Home} />\n        <Route exact path='/login' component={Login} />\n        <Route exact path='/register' component={Register} />\n        <Route exact path='/profile/:userId' component={Profile} />\n        <Route exact path='/posts/:postId' component={SinglePost} />\n      </Container>\n    </Router>\n  )\n}\n\nexport default App\n","// eslint-disable-next-line import/no-anonymous-default-export\n\nconst initialState = {\n  user: null,\n}\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case 'LOGIN':\n      return {\n        ...state,\n        user: action.payload,\n      }\n    case 'LOGOUT':\n      return {\n        ...state,\n        user: null,\n      }\n    case 'UPDATE_USER':\n      return {\n        ...state,\n        user: action.payload,\n      }\n\n    default:\n      return state\n  }\n}\n","import { combineReducers } from 'redux'\nimport authReducer from './auth.reducers'\n\nconst rootReducer = combineReducers({\n  auth: authReducer,\n})\n\nexport default rootReducer\n","import React from 'react'\nimport App from './App'\nimport ApolloClient from 'apollo-client'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { ApolloProvider } from '@apollo/react-hooks'\nimport { setContext } from 'apollo-link-context'\nimport { createUploadLink } from 'apollo-upload-client'\n\nimport { createStore, applyMiddleware } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport rootReducer from './reducers'\nimport thunk from 'redux-thunk'\nimport { Provider } from 'react-redux'\nconst uploadLink = createUploadLink({\n  // uri: 'http://localhost:5000/graphql',\n  uri: 'graphql',\n})\n\nconst authLink = setContext(() => {\n  const token = localStorage.getItem('jwtToken')\n  return {\n    headers: {\n      Authorization: token ? `Bearer ${token}` : '',\n    },\n  }\n})\n\nconst client = new ApolloClient({\n  link: authLink.concat(uploadLink),\n  cache: new InMemoryCache(),\n})\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n)\n\nexport default (\n  <ApolloProvider client={client}>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </ApolloProvider>\n)\n","import ReactDOM from 'react-dom'\nimport ApolloProvider from './ApolloProvider'\nimport './css/style.scss'\n\nReactDOM.render(ApolloProvider, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}